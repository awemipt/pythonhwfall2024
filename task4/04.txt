# ANN (Approximate nearest neighbor)
import pandas as pd
import numpy as np
from scipy import stats
from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split

iris_dataset = load_iris()
X_train, X_test, y_train, y_test = train_test_split(iris_dataset['data'], iris_dataset['target'], random_state=0)


1-2) Построить K-d tree
1.1 Выбрать первый столбец у X_train
1.2 Найти медиану
1.3 Разбить X_train на две части, где больше медианы и меньше или равно медиане
1.4 С каждой половиной проделать 1.1 до 1.3 взяв второй столбец. И так до четвёртого столбца

1.5 Используйте класс
class Node():
  def __init__(self):
    self.num_column = None
    self.median = None
    self.right = None
    self.left = None
    self.arr = None

def f(node, arr, num_column=0):
  node.num_column = num_column
  if num_column == 4:
    node.arr = arr
    return 0
  # code here!

root = Node()
f(root, X_train)

root.right.right.right.right.arr
array([[6.7, 3.3, 5.7, 2.5],
       [7.2, 3.6, 6.1, 2.5],
       [6.3, 3.4, 5.6, 2.4],
       [6.7, 3.1, 5.6, 2.4]])

root.right.right.right.left.arr
array([[7.2, 3.2, 6. , 1.8],
       [6.9, 3.2, 5.7, 2.3],
       [6.7, 3.3, 5.7, 2.1],
       [6.8, 3.2, 5.9, 2.3],
       [7.9, 3.8, 6.4, 2. ],
       [7.7, 3.8, 6.7, 2.2]])

root.right.right.right.median
#2.3

3-4) Построить Ball tree
3.1 Найти центр масс через np.mean
3.2 Найти самую дальнюю точку от центра
3.3 Найти самую дальнюю точку от точки 2.2
3.4 Разбить X_train на две часть, исходя из близости к точкам 2.2 и 2.3
3.5 Найти центры масс в каждой из них

5) Напишите класс K-d tree или Ball tree.
